# Реализуйте функцию roundrobin(), которая принимает произвольное количество позиционных аргументов, каждый из которых является итерируемым объектом.
# Функция должна возвращать итератор, генерирующий последовательность из элементов всех переданных итерируемых объектов:
# сначала первый элемент первого итерируемого объекта, затем первый элемент второго итерируемого объекта, и так далее; после второй элемент первого итерируемого объекта, затем второй элемент второго итерируемого объекта, и так далее.
# Примечание 1. Элементы итерируемых объектов в возвращаемом функцией итераторе должны располагаться в своем исходном порядке.
# Примечание 2. Гарантируется, что итерируемый объект, передаваемый в функцию, не является множеством.
# Примечание 3. В тестирующую систему сдайте программу, содержащую только необходимую функцию roundrobin(), но не код, вызывающий ее.

from itertools import zip_longest

def roundrobin(*args):
    res = zip_longest(*args, fillvalue='заглушка')
    gen = (i for j in res for i in j if i != 'заглушка' )
    yield from gen
    

# решение через цикл while

def roundrobin(*args):
    mylist = [iter(i) for i in args]
    while mylist:
        el = mylist.pop(0)
        try:
            yield next(el)
            mylist.append(el)
        except StopIteration:
            pass

